// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String       @id @default(cuid())
  name        String
  email       String       @unique
  password    String
  role        UserRole     @default(COLABORADOR) // role global
  memberships Membership[] // relação N:N via Membership
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime? // soft delete
  companies   Company[] // relação 1:N
  sentInvites Invite[]     @relation("InviterInvites")
  projects    Project[]
}

model Company {
  id                  String                       @id @default(cuid())
  name                String
  description         String?
  type                CompanyType
  invites             Invite[]
  memberships         Membership[] // relação N:N via Membership
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
  deletedAt           DateTime? // soft delete
  ownerId             String
  owner               User                         @relation(fields: [ownerId], references: [id])
  projects            Project[]
  departments         Department[] // novo: relação 1:N com Department
  whatsappPermissions WhatsappInstancePermission[] // back-relation to permissions
}

model Membership {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  role CompanyRole @default(COLABORADOR)

  active Boolean @default(true) // alinhado ao migration e aos tipos

  // novo: associação opcional a departamento
  department          Department?                  @relation(fields: [departmentId], references: [id])
  departmentId        String?
  whatsappPermissions WhatsappInstancePermission[] // back-relation to permissions

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // soft delete

  @@unique([userId, companyId]) // garante que não duplique associação
}

model Invite {
  id        String   @id @default(uuid())
  inviterId String
  companyId String
  token     String   @unique
  createdAt DateTime @default(now())

  company Company @relation(fields: [companyId], references: [id])
  inviter User    @relation("InviterInvites", fields: [inviterId], references: [id])
}

enum UserRole {
  ADMIN_GLOBAL
  GESTOR
  COLABORADOR
}

enum CompanyRole {
  ADMIN_EMPRESA
  GESTOR
  COLABORADOR
}

enum CompanyType {
  SOFTWARE // Vale AI
  MARKETING // Hub360
}

// novo: alvo da permissão de WhatsApp
enum WhatsappPermissionTarget {
  MEMBERSHIP
  DEPARTMENT
}

model Project {
  id               String       @id @default(cuid())
  companyId        String?
  company          Company?     @relation(fields: [companyId], references: [id])
  title            String
  description      String?
  clientName       String
  clientEmail      String?
  clientPhone      String?
  stage            ProjectStage @default(OPORTUNIDADE)
  probability      Int?
  budgetEstimate   Float?
  timelineEstimate Int?
  createdById      String
  createdBy        User         @relation(fields: [createdById], references: [id])
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  deletedAt        DateTime?
  meetings         String[]
  artifacts        String[]
  approvals        String[]
}

// novo: modelo Department
model Department {
  id                  String                       @id @default(cuid())
  name                String
  companyId           String
  company             Company                      @relation(fields: [companyId], references: [id])
  memberships         Membership[]
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
  deletedAt           DateTime?
  whatsappPermissions WhatsappInstancePermission[] // back-relation to permissions
}

// novo: associação de instância de WhatsApp a membro ou departamento de uma empresa
model WhatsappInstancePermission {
  id        String  @id @default(cuid())
  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  instanceId   String // id da instância (Evolution API)
  instanceName String?

  targetType   WhatsappPermissionTarget
  membershipId String?
  membership   Membership?              @relation(fields: [membershipId], references: [id])
  departmentId String?
  department   Department?              @relation(fields: [departmentId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([instanceId, companyId])
}

enum ProjectStage {
  OPORTUNIDADE
  LEAD
  BRIEFING1
  BRIEFING2
  DISCOVERY
  PROPOSTA
  CONTRATO
  EXECUCAO
  ENCERRADO
}
